# Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nvidia-inference-server.backend.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "nvidia-inference-server.name" . }}
    chart: {{ template "nvidia-inference-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.backend.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "nvidia-inference-server.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.backend.name }}
  template:
    metadata:
      labels:
        app: {{ template "nvidia-inference-server.name" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.backend.name }}

    spec:
      volumes:
        - name: modelrepo
          hostPath:
              path: /models
              type: Directory

      initContainers:
        - name: "modelpull"
          image: golang:1.11
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args: ["mkdir -p /models/resnet50_netdef/1;
                 wget -O /models/resnet50_netdef/1/model.netdef
                         http://download.caffe2.ai.s3.amazonaws.com/models/resnet50/predict_net.pb;
                 wget -O /models/resnet50_netdef/1/init_model.netdef
                         http://download.caffe2.ai.s3.amazonaws.com/models/resnet50/init_net.pb;
                 wget -O /models/resnet50_netdef/config.pbtxt
                         https://raw.githubusercontent.com/NVIDIA/tensorrt-inference-server/v1.0.0/docs/examples/model_repository/resnet50_netdef/config.pbtxt;
                 wget -O /models/resnet50_netdef/resnet50_labels.txt
                         https://raw.githubusercontent.com/NVIDIA/tensorrt-inference-server/v1.0.0/docs/examples/model_repository/resnet50_netdef/resnet50_labels.txt"]
          volumeMounts:
            - mountPath: /models
              name: modelrepo



      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.backend.deployment.imageName }}"
          imagePullPolicy: IfNotPresent

          resources:
            limits:
              nvidia.com/gpu: {{ .Values.backend.deployment.numGpus }}

          command: ["trtserver"]
          args: ["--model-store=/models"]

          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          livenessProbe:
            httpGet:
              path: /api/health/live
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            httpGet:
              path: /api/health/ready
              port: http
          volumeMounts:
            - mountPath: /models
              name: modelrepo
